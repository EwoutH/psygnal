{"project": "psygnal", "project_url": "https://github.com/pyapp-kit/psygnal", "show_commit_url": "https://github.com/pyapp-kit/psygnal/commit/", "hash_length": 8, "revision_to_hash": {"10": "46c0596ded8a0015dbf6560a1231b809035a103c", "13": "1013f23d46a40c55677aefb87a872499dd394af6", "16": "6fd1eba7bc537b64429f655ddb3477e7cff79f3a", "18": "148bcc3112c7543f39b04ed3678f14ac8ddfc75f", "21": "eda523d4d935d8af3dabed45c10be7d215c61f67", "22": "c37a7a0088482f3f386060fb6e73f0f69ed23dd7", "23": "001d7d7841039a9c042ecbaf9d32a031178d8a4d", "24": "eb5ba7593b44692cc31319dd8555ec1d3417d1df", "25": "9e9a66f7186aa4b7211a1f408a27662108422c10", "26": "5310d35e0f3c1b624a9ed2d54ef07436afa2cdb4", "27": "50434155e1050981b1339cc5a886673a580c28a0", "28": "07414b6b9968f954fc2a1096607de4d3faedd4e1", "29": "4562b3f2027a93370f759dcff42ffc0573a2d964", "30": "152104cba8d673402fabc721d3fa33663424608d", "31": "47c78972051abffa727d91a41680e52ea4859f99", "32": "e3391fb256addd6878b6cc1f1a36a025b3a7286e", "33": "7c154541cbdbc3fe00929d012cbb8bed071f057f", "34": "2d4728f32c58e02f26ff294d4bf43da7639bef96", "35": "8993d4b463050644c0a53c8ed00b640793d2b98b", "36": "7af66834bdf58f029f2947b36e8494b353272886", "39": "2b8ef029517545586c5849aa293fcf16a50b981e", "40": "4aa755263517557d61dfe456c341025775236933", "41": "59b2c7b13ef2d19d2d81279de78aa41aac7e6828", "42": "5ff7117cda4a81f918d74322d0e743c1db63ce68", "43": "c99852e24f9451f5409e50576900106d0bca9da5", "44": "96cee80f201adb11d1d3f34d706278e2769a7f25", "45": "5fb87571aaa53bc556581e832a1ed2352b3ee123", "46": "28472005a335769a477de04306c8ffc27ee184f9", "47": "4165ea14786e3bce2925324b155883770ec37264", "48": "d72df61e946e2ad31694e203d34faf8f7d31798b", "49": "723660157610bb6694115377ad1aaea304bdec40", "50": "407f40a8a5f2d9ab8359b2304aea559ce958157b", "51": "057d0e82c7ad04694cfc123b4dd62f781b66f15b", "52": "ccc738cd018c1b58c9bc4fd97550ecc16db80263", "53": "b1f41733610b7ad10958b4a7216ea3d47ca89d2b", "54": "adc34f08a00091b4d345f724c160c08d3f8be032", "55": "0ad82e14395aa52e7f083ad6b5c0ffd71b06c387", "56": "8c5a9c7ce88165bc71e3c2dca78a799d7dac021c", "57": "6615ab22ce1bc3543450a250ca0de3cde4887dad", "58": "b0bf47facd86a27ee6926115ea2e3f3073763b75", "59": "b91158a3f69d47a753858be926d7e41c0d2aeb0d", "60": "0449a6f0e675651442ba63f9e030b1a37f57d5d2", "61": "950989af2db58cba4b7522aa3f9dbf7ef5a4cd0e", "62": "82ebda320a843f55701f5a8a2b573fcb0c44daff", "63": "0769ad402d8fb20bfd4f60675f6fa4f8bbb88256", "64": "7cf49cc3d993aecd09821620a36cf60fc04af4f9", "65": "ad35a696dc4d29040f2c6089fb92e24bc0dfa4af", "66": "409a79c1a96ebf32b95a29ac72aa3f5f9246efc8", "67": "ae9e83cf04122b55817d3333c0814cb81b7bc75f", "68": "4a8f6f403fc8de05c1730c10dc11d2b546fb1535", "69": "db1ea342f41f4c3e39ca77acc5b971ddb191dd30", "70": "b88c90116d9799a8420785ee80b93ae03b1b5c5e", "71": "97f61a34b1249927762efe2b6e056f9f647768ca", "72": "12305394aec08a77c40c5f7f1cc553140c43506d", "73": "9cddb7e41640452326f8b10a7f88973b9ce4fde4", "74": "dbb9683e083a68502123d6ae38493884750ab397", "75": "6e4eec5dfe241770d68a7be16c4d46340d21bf6b", "76": "ccc96c10c84b4610a05101785df4e390cf48b938", "77": "cd53ebb595aef85b33e64d179654734621af289a", "78": "1bb6609a49c27996fda699206185308922eabdea", "79": "a1a1ca98f2934f12ea67ca5aa6f12732de3fb937", "80": "2c66984f5a6f2f13f5a6fd0f01dc91ea2a66cb31", "81": "63d6c41dde1c4ab9ed492055b9098a3a5e477c55", "82": "dc59687ca447f751cb33d39d46e40fea9c730c2b", "83": "f309c05ea967519ca84a40dbf00db6b6d04faa56", "84": "37c9bedefdf4d013021ccd1c7ea25ed4c51eb86a", "85": "c37bb013af344737f65e35ccc99535935599535d", "86": "01095f866d5c1468a69d0f87b2ab09f88367c0ca", "87": "a12702352ffd11c8f69bc023ebcf70302af8211c", "88": "6cc0b991a63f2cfd2a0b56d9da70c6374f8f2f16", "89": "f819bbccaef840afb8a80a34686c2d6d4a0215b7", "90": "e8065c7eb5d4771a14b17a840035b6335341c792", "91": "6809b0f95e9a2bf4c6823fb4ca6cf349fd121979", "92": "f6c2c412741c90816b0ac40588df865605bf6fdd", "93": "3ef213e9a8cdd348e91a14e713a03673e339dacb", "94": "637a57d5f3329a962bead386dd2bb142306549a0", "95": "11b61b120b5925814b75130e1ab0c51bd03e7c93", "96": "6f1124d8943a2fb1c4bf376af261376777327c63", "97": "2a4117b83bcb94ccdce19004fa7e62c34be50257", "98": "3f1b10d2317fca3e72f4c013064906e7a880d2db", "99": "fc1d77216c6f6db1fc704da776c22b1a235eb452", "100": "3d24217bede1320a523689c97f8a6a3d7b1a3c63", "101": "c236272e370a07232d7c37a557ab60359e849fcf", "102": "3bad4b30a0d4de88bd9e0f3a142468be89a61e1f", "103": "8041534f2d4a4f77e12f31b38f3941312f2ce46f", "104": "6842ff6820b93bdf7545464069abc2d246f94cbc", "105": "09a27b7ea725ff7af98ad1c3c2bd9896ada56ab6", "106": "8c6918f7d13f71f47d7af449fe8841af5fe34f06", "107": "da66c024b1864f6c9560f9c3edaaf882b379ca41", "108": "6b1c08b33a8de8d3aab13d4111cd35cce034990b", "109": "f48ae06cf56560f576495a5c55811c9ed3ddd714", "110": "4ea6cb48e6301f230251b999b8b2d021f732143c", "111": "7b9577b1fbb0faeac7a479faa97310f44d78c4e2", "112": "6e750e06b9971e997b53db5782ea3a0f78176e53", "113": "a4d38d325b722d7bcff4d36c5ce1c400568da98d", "114": "2b80df3c3c44ac1988bc76d9bc551ec1da9aec2b", "115": "1c7e547d6a0e6ed5b27f68de72f53603acffa07a", "116": "0e3f4b3393cb032ae38a2a31aa5b84d19dcc6225", "117": "8bcc70a68fd5c05217a90fddf0913326535fa81f", "118": "fc5cb2acc2e652c7fae27e55412fdca4a68b52a2", "119": "d4f59f94f5758313a0d2c899e5a67bb9d93d5287", "120": "cba92f5ab18d3e8758bb57f4fd8ac52b88c5a412", "121": "f3b352bb0f871670d3a4ed96c2c5d19491db7fca", "122": "7ab70304089ba546d72dc37c27d35db8cc66dcaa", "123": "b03ee315a917c36e958150e167b8d404499ff349", "124": "edfcde9f8429c1a3d0d4fa200b7a2f62f6c79a78", "125": "84e1f5f2c84c969cd609292ff49730f86ad41977", "126": "04f9855a5e5b0cb6c07ed265051a3df77a45e272", "127": "699076f15112e1398e17ccce06c10e342a8e7ec2", "128": "3e96ea7131d9a94a0569885eddcd6f328c26e8c5", "129": "37590225a2bb0b2dc2cc1ae3756cae2d97c0b173", "130": "7a2cd47b6f9c0fbe33b4f36dfde6739a12c2cd57", "131": "1820c52e236704fa44a25d889c44a264895c3cf8", "132": "5fb7e4f4ec581632ca1fe5ffd4de3a6f76e0516e", "133": "026fe920456dc4da8f23d0d0da0de4684e8905ce", "134": "4a52e82b0c633718c0dccb4ccfc93983bd80a54e", "136": "098adfb14c236e854b11799f963f4a392d6456ac", "137": "79eb278b794a2f5d470630883e5b5978e71ecdfb", "138": "6ca374f4212e55c338a2878beb88feb5b8970699", "139": "af9f809ba9ec59089639dc1eab7595f3adc93914", "140": "e38187861897868f499c38ceb615925b8e31a52e", "141": "3f0c2f9ed903ab78959e1811cb3792c0c30f1a45", "142": "d8c89ad06bb6d711e89000f776b2b7b9b18c651b", "143": "8ad3e8659c1a3eead0a1694a3d10d7d44b1beac6", "144": "df7689cfdf720f1c8783bf1d4c25b2b71193ea46", "145": "d75e6489e8954a903339144ec6e5f2af64ceeac6", "146": "7154c4759cc640cab2c4fb158010373c2c99c1e7", "147": "60551dd223ffc83f1723df46329886076ed8ac2a", "148": "4d0ab10175bf50796c07f105633213c897938e5b", "149": "bf14c7bfc104774475ec9745636ee0a9f7f61ace", "150": "3493af946d62120b02e67ce8987c60d4356f0a80", "151": "61f4744afe43b457695faaf2086a2f01fe70dbb7", "152": "5a555e3dba5ea20a9a7c19a13927cff3f9e3073b", "153": "ba207cdc1b49753906ac7c2f995248964592721d", "154": "a3a7cda9718696ce9ca9ad69ff9f940ac00af2e8", "155": "6704932b9e5212482098a441a96527c02a368221", "156": "b79620ebe74d95a81b6a6e574c94503714f23075", "157": "46af0b5197478bd73055bbd2bd27c39e60c5c0c8", "158": "e22e3670842311ee9473ce236f5342f4b5a38880", "159": "0f9a3ff5d9c302543082fa538213efea235dd946", "160": "878789c74acdcaee6a203861ccc01ec1be8a7ddc", "161": "9db4ec5f71ef59f81fe3af2f80d03d3d388616be", "162": "fae306cccf74b02bfeb4f11ff04580f69853a703", "163": "512b8ec446898e05e430426b29bd6fbe78adac78", "164": "0ae113e9779bea02725fda6902e1d19e63495871", "165": "4723aef2929941b5e5a53f09430310823003077b", "166": "638dc690d6409672199d961ecfe04e404764531f", "167": "79000857450d95ac610cb198eb561106ed366c4f", "168": "dfa08a18398ee30a6886e12308275113d652e54e", "169": "d60f40bc353f366cf352e3b243b75485f4791788", "170": "16f1f99a052636d66a74bf607d434b53023fd6a7", "171": "6dd67540b88e3cc3ebea564045e7e600d05f2093", "172": "ea232ff06a691838a03abb328b95f5b0a8ed8069", "173": "7a48c1dbfb4490b7bf596b9a890c5eb563813e28", "174": "22b18b8d632f0b50cee2870bf03e3aec39a92fe0", "175": "dd6ffe6323edc0d902a61fa48241f7044969d27b", "176": "c26eed8ade99c16cfe3cc998971ea3b4c5dc54c3", "177": "35a6c1a0d9337c7b7d2873b9576117ab78fffdaa", "178": "3d199411537a8c5d2fbfa6edd7e055240d2a9d5c", "179": "4e9fd213ee3b23c28a4d2082c1a6bc4e4f607dad", "180": "fb09cfd734e4b0e6cf68fe7126f8ed53cface119", "181": "014a285056c5b86d22715cdfd7cc2274466d94c2", "182": "3f520654452108b628df3eb5558eee96353dcf53", "183": "d384e8779876c84e1937afbad652c91e9ef74a3c", "184": "4ee2a382d37874943c4b2da05601bbdbf523fd98", "185": "2ed285affdb0bac1375789dbfe3ea4f84d8d634f", "186": "521f7f7d9992d4e94d1dfdcdc078358727a54c66", "187": "3f3efa9fe81d0e980c9606526718430a5f3093e5", "188": "bddecfa6df2fc83e1cb3f0ad2a0940d489e7d52a", "189": "df1f6f6397957a682634c59679f5a62a79b392c0", "190": "e2041014ef0e385abe5cc56845f0db3745660db6", "191": "98973e072abf00a4287ba7005f268cd1e01540e2", "192": "0ad591fa1ce5533396b5cc73aad2e7dbfc6e08e2", "193": "ea7dc0182445927d00094381056cef0d5e1ebbc8", "194": "ba7994c12c5e52c080f69a9906a7475bd42a077f", "195": "14f29f214d28e1e673be78cade83a4119935fcdc", "196": "1fa88adb171f6a669ecde5db47ed945bc28421e1", "197": "b14880cd13a5dd95aeadc3525fdd48104844aab3", "198": "6f314a93b74b8033c54a7fe97b58829d6b9f897a", "199": "649eb1e5113788bd7ee9aad241b9dce78801552f", "200": "f9fd072f2b2ed50d241d38595e7a03cdca6285f0", "201": "cfdd6a6f8d1011b22edc58ee4972eb25640d9501", "202": "186ec5745efce412fde0fadaeddb1d6e136dbc10", "203": "9a5c0cfda1f98c641b28ed1290cd10496630b9c5", "204": "a87ad44f62d3b6e687e54f2fa09bcdd94c0222bb", "205": "538b2805050d9c4957ae82d581313a1ab3fc19cd", "206": "aecc2024331819b7fea412ee0164275bb7bae44d", "207": "108000cd66cf75a45bc0b4c25af1790273726674", "208": "58c6878d4dbaf0b942e97f001f6e677d5b3fafb9", "209": "571fb2bed87095a94b02cc00d186b0a7f2a785db", "210": "dbda7d73fbc93e1226c0e8f5bbc46e87ce678052", "211": "8cd9d39cb6162a09c2a82bf7ae2a90def0944e4f", "212": "ce3b7e82e31de5b39646812d712092f695bf71c4", "213": "76ac6480503ed8ae47a183a2f50fcfe4d13ef59b", "214": "e2849951863618a83307c31c7e811a78863bf1f7", "215": "c4cb74a8cf805046a8161abefb8be3d7d41362ec", "216": "7c613743509f308101dca3f3e301e27085261557", "217": "049fc410ede0917a8e172d08c3a248ecc9ab624a", "218": "51f74db2a81f17fb56b0d9fee87103c5d551d53c", "219": "da5db0eb6af1d58b997d51a58306073c892a3e2a", "220": "c9e52099d4f69db55502107a05514ba4f203904e", "221": "6f06c85e31db610a5d4fde9eb5d84ae4f367fc3b", "222": "9ec35905c39e1bc34d0cc79667c08ee6dc053386", "223": "7b752cbac3e655aa73a446672865f82e72370481", "224": "74aa34f94529ab2414428ab7148a73536aafeff1", "225": "fc867ebb9f20e2ee09e3a258d8ad3bd34f24b47b", "226": "0b2492e2c8320e297f0cdcc165adca652ea9b341", "227": "8c7c13ffb11bb47332902c81c583aaf20dc53031", "228": "50cb7326011b14a03ac8a4ebd1e37743d14e421f", "229": "495a0b0f0e939c76c92783b3c07f095c85ea577d", "230": "cb3b6bfce779da6daab736be94d7d019497e6341", "231": "cd3b23fe0cedbd407763f4d60a337c4223ec052f", "232": "28eeff602d300ed9428eff56206dbb264e7c758e", "233": "052779e3eceb4de6e0c3860d9b8222b6ea86a6f4", "234": "c8bab54abccbe3c580af4994771a6f321420f7b4", "235": "a9fefcaddaf0d6e7ed31f35abf448f0d05d19879", "236": "d0afc8118916e6547b7e5a6459b57c293e6fdc8f", "237": "8542440b9405e23687710abee1a100d65e65196e", "238": "149c460c16bc862dc6129c2a1fdaa6a71867ff9f", "239": "ae6f496b3d72ec48813de9f01c08598981e95071", "240": "8ec0671696ff76505c2a76263f8e94a78d349f28", "241": "8c48de13fce8aa2c3de614fe2fb4c22001af070a", "242": "ee971a5a188f8ec2f1d84667146218f4ebf61058", "243": "e884014b1747521d4a6116469bd23a64f52e3c68", "244": "89e728b091b4a90cf246da3d178d2a4aa7dc83a2", "245": "60420f7c14dec5e644ff28474ce26dd38efc5b76", "246": "1c21e9ec3cf4392bed3252ee3c7e69233a196045", "247": "b94e3157137c08ea2f39595d86d0aa2199668427", "248": "2c7f428cb4db8e78a90e5edf0df8763c3e2c84db", "249": "7ffbd94d6a0adfc0b32ffbf5264badb42fa49ca3", "250": "c9f746d52047cad58c59f718dcbfec23df9a878f", "251": "6f5e881d52527cd3ffc7d828b8774d15f9b8ed7e", "252": "980d0a58dd15bce99fb0920f3b765c50601580de", "253": "af20a70a481ffebc47318d5e70dbad855c0e0225", "254": "ac33a548aff5d610c7c2819c5b81b2aa30eb47dd", "255": "a4a3348fb6f81c3aeefc8a1c723360c9a26db23e"}, "revision_to_date": {"10": 1625521043000, "13": 1625526224000, "16": 1625526675000, "18": 1625527708000, "21": 1625531580000, "22": 1625668411000, "23": 1625670351000, "24": 1625693581000, "25": 1625699116000, "26": 1625699136000, "27": 1626048187000, "28": 1626048199000, "29": 1626048684000, "30": 1626132980000, "31": 1626737186000, "32": 1627324482000, "33": 1627932395000, "34": 1628654132000, "35": 1629770379000, "36": 1631930853000, "39": 1633094482000, "40": 1633094496000, "41": 1633374520000, "42": 1633980247000, "43": 1634477960000, "44": 1634483708000, "45": 1634501021000, "46": 1634501407000, "47": 1635102333000, "48": 1636124973000, "49": 1636200286000, "50": 1636202714000, "51": 1636203358000, "52": 1636203511000, "53": 1636203908000, "54": 1636204020000, "55": 1636204182000, "56": 1636213121000, "57": 1636216340000, "58": 1636218353000, "59": 1636230475000, "60": 1636253414000, "61": 1636291948000, "62": 1636298532000, "63": 1636314294000, "64": 1636317730000, "65": 1636320892000, "66": 1636325153000, "67": 1636325415000, "68": 1636331238000, "69": 1636747906000, "70": 1637010914000, "71": 1637266259000, "72": 1637612504000, "73": 1638829718000, "74": 1642865795000, "75": 1644164684000, "76": 1644164783000, "77": 1644192291000, "78": 1644268482000, "79": 1644331582000, "80": 1644364499000, "81": 1644439019000, "82": 1644439783000, "83": 1644448951000, "84": 1644455503000, "85": 1644456335000, "86": 1644456813000, "87": 1644458204000, "88": 1644494933000, "89": 1644496070000, "90": 1644503018000, "91": 1644521231000, "92": 1644590720000, "93": 1644677883000, "94": 1644678512000, "95": 1644843052000, "96": 1644843060000, "97": 1644843371000, "98": 1644858496000, "99": 1644858534000, "100": 1644939523000, "101": 1645902288000, "102": 1646002509000, "103": 1646002873000, "104": 1647340866000, "105": 1648846781000, "106": 1651503184000, "107": 1651507859000, "108": 1651513535000, "109": 1651514023000, "110": 1651524423000, "111": 1651878778000, "112": 1652639931000, "113": 1653522555000, "114": 1653582213000, "115": 1653584258000, "116": 1654024890000, "117": 1654029592000, "118": 1654035382000, "119": 1654481780000, "120": 1654505343000, "121": 1654505357000, "122": 1654505368000, "123": 1654505387000, "124": 1654505436000, "125": 1654508591000, "126": 1654508601000, "127": 1654508612000, "128": 1654730343000, "129": 1654971637000, "130": 1655114820000, "131": 1655721750000, "132": 1657278971000, "133": 1657573677000, "134": 1657575599000, "136": 1658226015000, "137": 1658226024000, "138": 1658338635000, "139": 1658675956000, "140": 1658676531000, "141": 1658836222000, "142": 1658836231000, "143": 1658849819000, "144": 1659488132000, "145": 1659539296000, "146": 1659540162000, "147": 1659541105000, "148": 1659554804000, "149": 1660561902000, "150": 1663364191000, "151": 1663584500000, "152": 1663882904000, "153": 1663890053000, "154": 1664132921000, "155": 1664135103000, "156": 1664135332000, "157": 1664808410000, "158": 1664840399000, "159": 1665755263000, "160": 1665788373000, "161": 1665790865000, "162": 1665791236000, "163": 1665791361000, "164": 1666014739000, "165": 1666871912000, "166": 1666883487000, "167": 1667008207000, "168": 1667212783000, "169": 1667952026000, "170": 1668002429000, "171": 1668002440000, "172": 1668176758000, "173": 1668177197000, "174": 1668371625000, "175": 1668371880000, "176": 1669211280000, "177": 1669211433000, "178": 1669212672000, "179": 1669212683000, "180": 1669213360000, "181": 1669487869000, "182": 1669562085000, "183": 1670163086000, "184": 1670846712000, "185": 1671567643000, "186": 1671569791000, "187": 1671575920000, "188": 1671830379000, "189": 1672254433000, "190": 1676077166000, "191": 1676078957000, "192": 1676124276000, "193": 1676129391000, "194": 1676129674000, "195": 1676134085000, "196": 1676134132000, "197": 1676311835000, "198": 1676318895000, "199": 1676671623000, "200": 1676725189000, "201": 1676725807000, "202": 1676920991000, "203": 1676951034000, "204": 1676986004000, "205": 1676986062000, "206": 1676991496000, "207": 1676996894000, "208": 1677003295000, "209": 1677003306000, "210": 1677003910000, "211": 1677005370000, "212": 1677007641000, "213": 1677011000000, "214": 1677088875000, "215": 1677088917000, "216": 1677102632000, "217": 1677170748000, "218": 1677180851000, "219": 1677182562000, "220": 1677184204000, "221": 1677534310000, "222": 1677593670000, "223": 1678597183000, "224": 1679595790000, "225": 1680561353000, "226": 1680610956000, "227": 1680637532000, "228": 1680825781000, "229": 1680828842000, "230": 1684285360000, "231": 1684286308000, "232": 1684286351000, "233": 1684286572000, "234": 1685368628000, "235": 1685373786000, "236": 1685374180000, "237": 1685382040000, "238": 1686051503000, "239": 1687387864000, "240": 1688562116000, "241": 1688641570000, "242": 1688932159000, "243": 1691183175000, "244": 1691769256000, "245": 1691781485000, "246": 1691801592000, "247": 1691846769000, "248": 1691847019000, "249": 1691848024000, "250": 1691857010000, "251": 1691857337000, "252": 1692055842000, "253": 1692056446000, "254": 1692056570000, "255": 1692061407000}, "params": {"machine": ["github-actions"], "python": ["3.10"], "env-HATCH_BUILD_HOOKS_ENABLE": ["1"], "branch": ["main"]}, "graph_param_list": [{"machine": "github-actions", "python": "3.10", "env-HATCH_BUILD_HOOKS_ENABLE": "1", "branch": "main"}], "benchmarks": {"benchmarks.ConnectSuite.time_connect": {"code": "class ConnectSuite:\n    def time_connect(self):\n        self.emitter.changed.connect(callback)\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "66e46036f5d42997c49d40a9db3597e499dacb6072ef55c098e003e4282719ff", "warmup_time": -1}, "benchmarks.ConnectSuite.time_connect_builtin": {"code": "class ConnectSuite:\n    def time_connect_builtin(self):\n        self.emitter.changed.connect(print)\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect_builtin", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "221168cd3c2a537806a7f6924ebcf8c2191c4a712198efecd60b9ccab55a9ac0", "warmup_time": -1}, "benchmarks.ConnectSuite.time_connect_checktype": {"code": "class ConnectSuite:\n    def time_connect_checktype(self):\n        self.emitter.changed.connect(callback, check_nargs=True, check_types=True)\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect_checktype", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6c640409d4d3d1c7c9bcd34ad0f1ae8a1de34357d454bf40267453df913de0de", "warmup_time": -1}, "benchmarks.ConnectSuite.time_connect_lambda": {"code": "class ConnectSuite:\n    def time_connect_lambda(self):\n        self.emitter.changed.connect(lambda x: None)\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect_lambda", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ba00b5593d648e88bd82a3245976eb32c1d3ddc9682b3860e86899896c6af42d", "warmup_time": -1}, "benchmarks.ConnectSuite.time_connect_method": {"code": "class ConnectSuite:\n    def time_connect_method(self):\n        self.emitter.changed.connect(self.receiver.method)\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect_method", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2cb74135059abc458bb8b736e771a9bb881577922d2fd4cb90b6a6924be0de4b", "warmup_time": -1}, "benchmarks.ConnectSuite.time_connect_nochecks": {"code": "class ConnectSuite:\n    def time_connect_nochecks(self):\n        self.emitter.changed.connect(callback, check_nargs=False, check_types=False)\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect_nochecks", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3cc7bebdb3f185d0c831f34041217d8447354aee33080adf2f646e9d363d571a", "warmup_time": -1}, "benchmarks.ConnectSuite.time_connect_partial": {"code": "class ConnectSuite:\n    def time_connect_partial(self):\n        self.emitter.changed.connect(partial(callback))\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect_partial", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c9a61f40df416d3ad071f9e9d2d0d401b58e06cf3e3972c0dc0febd23ab9df91", "warmup_time": -1}, "benchmarks.ConnectSuite.time_connect_partial_method": {"code": "class ConnectSuite:\n    def time_connect_partial_method(self):\n        self.emitter.changed.connect(partial(self.receiver.method2, y=1))\n\n    def setup(self):\n        self.emitter = E()\n        self.receiver = R()", "min_run_count": 2, "name": "benchmarks.ConnectSuite.time_connect_partial_method", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9cac7442824f87357461f60156f32c7fc0b0c2cb70cec7b7688abac388b6b5cd", "warmup_time": -1}, "benchmarks.CreateSuite.time_create_signal": {"code": "class CreateSuite:\n    def time_create_signal(self):\n        _ = Signal()", "min_run_count": 2, "name": "benchmarks.CreateSuite.time_create_signal", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4646c749e350ba87553eaed7dafd33c1eb6a5d726510df8ae9e93c20091f8a80", "warmup_time": -1}, "benchmarks.CreateSuite.time_create_signal_instance": {"code": "class CreateSuite:\n    def time_create_signal_instance(self):\n        _ = SignalInstance()", "min_run_count": 2, "name": "benchmarks.CreateSuite.time_create_signal_instance", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2c1362cf3b63757d6a81f4bba01cd935c48320419d45293a4744351efb544022", "warmup_time": -1}, "benchmarks.EmitSuite.time_emit_to_all": {"code": "class EmitSuite:\n    def time_emit_to_all(self, n: int) -> None:\n        self.emitter4.changed.emit(1)\n\n    def setup(self, n: int) -> None:\n        self.receiver = R()\n    \n        self.emitter1: E = E()\n        for _ in range(n):\n            self.emitter1.changed.connect(callback, unique=False)\n    \n        self.emitter2 = E()\n        for _ in range(n):\n            self.emitter2.changed.connect(self.receiver.method, unique=False)\n    \n        # not sure the best way to mark APIs that won't work with older commits\n        self.emitter3 = E()\n        if hasattr(self.emitter3.changed, \"connect_setattr\"):\n            for _ in range(n):\n                self.emitter3.changed.connect_setattr(self.receiver, \"attr\")\n    \n        self.emitter4 = E()\n        for _ in range(n):\n            self.emitter4.changed.connect(callback, unique=False)\n            self.emitter4.changed.connect(self.receiver.method, unique=False)\n    \n        self.emitter5 = E()\n        if hasattr(self.emitter5.changed, \"connect_setitem\"):\n            for _ in range(n):\n                self.emitter5.changed.connect_setitem(self.receiver, \"x\")\n    \n        self.emitter6 = E()\n        for _ in range(n):\n            self.emitter6.changed.connect(\n                partial(self.receiver.method2, y=1), unique=False\n            )", "min_run_count": 2, "name": "benchmarks.EmitSuite.time_emit_to_all", "number": 0, "param_names": ["param1"], "params": [["1", "10", "70"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5462f10f1196273612837481c9b033a8760d7158259b85de21d2d286edd8d764", "warmup_time": -1}, "benchmarks.EmitSuite.time_emit_to_attr": {"code": "class EmitSuite:\n    def time_emit_to_attr(self, n: int) -> None:\n        self.emitter3.changed.emit(1)\n\n    def setup(self, n: int) -> None:\n        self.receiver = R()\n    \n        self.emitter1: E = E()\n        for _ in range(n):\n            self.emitter1.changed.connect(callback, unique=False)\n    \n        self.emitter2 = E()\n        for _ in range(n):\n            self.emitter2.changed.connect(self.receiver.method, unique=False)\n    \n        # not sure the best way to mark APIs that won't work with older commits\n        self.emitter3 = E()\n        if hasattr(self.emitter3.changed, \"connect_setattr\"):\n            for _ in range(n):\n                self.emitter3.changed.connect_setattr(self.receiver, \"attr\")\n    \n        self.emitter4 = E()\n        for _ in range(n):\n            self.emitter4.changed.connect(callback, unique=False)\n            self.emitter4.changed.connect(self.receiver.method, unique=False)\n    \n        self.emitter5 = E()\n        if hasattr(self.emitter5.changed, \"connect_setitem\"):\n            for _ in range(n):\n                self.emitter5.changed.connect_setitem(self.receiver, \"x\")\n    \n        self.emitter6 = E()\n        for _ in range(n):\n            self.emitter6.changed.connect(\n                partial(self.receiver.method2, y=1), unique=False\n            )", "min_run_count": 2, "name": "benchmarks.EmitSuite.time_emit_to_attr", "number": 0, "param_names": ["param1"], "params": [["1", "10", "70"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e69297c247fb96213eb8e60c0d3b5d0571d69428b30675c83f980f92f4dde218", "warmup_time": -1}, "benchmarks.EmitSuite.time_emit_to_function": {"code": "class EmitSuite:\n    def time_emit_to_function(self, n: int) -> None:\n        self.emitter1.changed.emit(1)\n\n    def setup(self, n: int) -> None:\n        self.receiver = R()\n    \n        self.emitter1: E = E()\n        for _ in range(n):\n            self.emitter1.changed.connect(callback, unique=False)\n    \n        self.emitter2 = E()\n        for _ in range(n):\n            self.emitter2.changed.connect(self.receiver.method, unique=False)\n    \n        # not sure the best way to mark APIs that won't work with older commits\n        self.emitter3 = E()\n        if hasattr(self.emitter3.changed, \"connect_setattr\"):\n            for _ in range(n):\n                self.emitter3.changed.connect_setattr(self.receiver, \"attr\")\n    \n        self.emitter4 = E()\n        for _ in range(n):\n            self.emitter4.changed.connect(callback, unique=False)\n            self.emitter4.changed.connect(self.receiver.method, unique=False)\n    \n        self.emitter5 = E()\n        if hasattr(self.emitter5.changed, \"connect_setitem\"):\n            for _ in range(n):\n                self.emitter5.changed.connect_setitem(self.receiver, \"x\")\n    \n        self.emitter6 = E()\n        for _ in range(n):\n            self.emitter6.changed.connect(\n                partial(self.receiver.method2, y=1), unique=False\n            )", "min_run_count": 2, "name": "benchmarks.EmitSuite.time_emit_to_function", "number": 0, "param_names": ["param1"], "params": [["1", "10", "70"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "47b43327582e4f428c3f56412404094fe623c25b6f0bb70c7df88ed445b28e24", "warmup_time": -1}, "benchmarks.EmitSuite.time_emit_to_item": {"code": "class EmitSuite:\n    def time_emit_to_item(self, n: int) -> None:\n        self.emitter5.changed.emit(1)\n\n    def setup(self, n: int) -> None:\n        self.receiver = R()\n    \n        self.emitter1: E = E()\n        for _ in range(n):\n            self.emitter1.changed.connect(callback, unique=False)\n    \n        self.emitter2 = E()\n        for _ in range(n):\n            self.emitter2.changed.connect(self.receiver.method, unique=False)\n    \n        # not sure the best way to mark APIs that won't work with older commits\n        self.emitter3 = E()\n        if hasattr(self.emitter3.changed, \"connect_setattr\"):\n            for _ in range(n):\n                self.emitter3.changed.connect_setattr(self.receiver, \"attr\")\n    \n        self.emitter4 = E()\n        for _ in range(n):\n            self.emitter4.changed.connect(callback, unique=False)\n            self.emitter4.changed.connect(self.receiver.method, unique=False)\n    \n        self.emitter5 = E()\n        if hasattr(self.emitter5.changed, \"connect_setitem\"):\n            for _ in range(n):\n                self.emitter5.changed.connect_setitem(self.receiver, \"x\")\n    \n        self.emitter6 = E()\n        for _ in range(n):\n            self.emitter6.changed.connect(\n                partial(self.receiver.method2, y=1), unique=False\n            )", "min_run_count": 2, "name": "benchmarks.EmitSuite.time_emit_to_item", "number": 0, "param_names": ["param1"], "params": [["1", "10", "70"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ad6fa0958e2c9bb14d06dcd10c8cb9ebbf3d933af3e0cd219897dc5a1b7f0572", "warmup_time": -1}, "benchmarks.EmitSuite.time_emit_to_method": {"code": "class EmitSuite:\n    def time_emit_to_method(self, n: int) -> None:\n        self.emitter2.changed.emit(1)\n\n    def setup(self, n: int) -> None:\n        self.receiver = R()\n    \n        self.emitter1: E = E()\n        for _ in range(n):\n            self.emitter1.changed.connect(callback, unique=False)\n    \n        self.emitter2 = E()\n        for _ in range(n):\n            self.emitter2.changed.connect(self.receiver.method, unique=False)\n    \n        # not sure the best way to mark APIs that won't work with older commits\n        self.emitter3 = E()\n        if hasattr(self.emitter3.changed, \"connect_setattr\"):\n            for _ in range(n):\n                self.emitter3.changed.connect_setattr(self.receiver, \"attr\")\n    \n        self.emitter4 = E()\n        for _ in range(n):\n            self.emitter4.changed.connect(callback, unique=False)\n            self.emitter4.changed.connect(self.receiver.method, unique=False)\n    \n        self.emitter5 = E()\n        if hasattr(self.emitter5.changed, \"connect_setitem\"):\n            for _ in range(n):\n                self.emitter5.changed.connect_setitem(self.receiver, \"x\")\n    \n        self.emitter6 = E()\n        for _ in range(n):\n            self.emitter6.changed.connect(\n                partial(self.receiver.method2, y=1), unique=False\n            )", "min_run_count": 2, "name": "benchmarks.EmitSuite.time_emit_to_method", "number": 0, "param_names": ["param1"], "params": [["1", "10", "70"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "484b12e4b025ddcc4273e234c135600f8734986f7742b2dc71c3f13a4ba0ddf3", "warmup_time": -1}, "benchmarks.EmitSuite.time_emit_to_partial": {"code": "class EmitSuite:\n    def time_emit_to_partial(self, n: int) -> None:\n        self.emitter6.changed.emit(1)\n\n    def setup(self, n: int) -> None:\n        self.receiver = R()\n    \n        self.emitter1: E = E()\n        for _ in range(n):\n            self.emitter1.changed.connect(callback, unique=False)\n    \n        self.emitter2 = E()\n        for _ in range(n):\n            self.emitter2.changed.connect(self.receiver.method, unique=False)\n    \n        # not sure the best way to mark APIs that won't work with older commits\n        self.emitter3 = E()\n        if hasattr(self.emitter3.changed, \"connect_setattr\"):\n            for _ in range(n):\n                self.emitter3.changed.connect_setattr(self.receiver, \"attr\")\n    \n        self.emitter4 = E()\n        for _ in range(n):\n            self.emitter4.changed.connect(callback, unique=False)\n            self.emitter4.changed.connect(self.receiver.method, unique=False)\n    \n        self.emitter5 = E()\n        if hasattr(self.emitter5.changed, \"connect_setitem\"):\n            for _ in range(n):\n                self.emitter5.changed.connect_setitem(self.receiver, \"x\")\n    \n        self.emitter6 = E()\n        for _ in range(n):\n            self.emitter6.changed.connect(\n                partial(self.receiver.method2, y=1), unique=False\n            )", "min_run_count": 2, "name": "benchmarks.EmitSuite.time_emit_to_partial", "number": 0, "param_names": ["param1"], "params": [["1", "10", "70"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4eb1dbf1f5a32f0e8841f6ba4e0ee40f75681b12824f0c0027d1a062833446d4", "warmup_time": -1}}, "machines": {"github-actions": {"machine": "github-actions", "version": 1}}, "tags": {"v0.1.0": 21, "v0.1.0rc0": 10, "v0.1.0rc1": 13, "v0.1.0rc2": 16, "v0.1.0rc3": 18, "v0.1.1": 23, "v0.1.2": 29, "v0.1.3": 40, "v0.1.4": 45, "v0.2.0": 67, "v0.3.0": 90, "v0.3.0rc0": 85, "v0.3.0rc1": 86, "v0.3.0rc2": 87, "v0.3.0rc3": 88, "v0.3.0rc4": 89, "v0.3.0rc5": 90, "v0.3.1": 94, "v0.3.2": 97, "v0.3.3": 99, "v0.3.4": 109, "v0.3.5": 113, "v0.4.0": 143, "v0.4.1": 153, "v0.4.1rc0": 151, "v0.4.2": 156, "v0.5.0": 163, "v0.6.0": 167, "v0.6.0.post0": 169, "v0.6.1": 175, "v0.7.0": 187, "v0.7.1": 194, "v0.7.2": 196, "v0.8.0": 217, "v0.8.0.rc1": 215, "v0.8.1": 220, "v0.9.0": 229, "v0.9.1": 237, "v0.9.2": 251, "v0.9.3": 255}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}